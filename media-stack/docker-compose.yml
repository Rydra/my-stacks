x-networks: &networks
  networks:
    - mynetwork


name: ${PROJECT_NAME}
services:

  # To use/enable VPN, Run this compose file with --profile=vpn. Its highly recommended to use VPN.
  vpn:
    ## Read https://github.com/qdm12/gluetun-wiki/tree/main/setup/providers for details on configuring VPN for your service provider.
    profiles: ["vpn"]
    container_name: vpn
    image: qmcgaw/gluetun:v3.37.0
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-nordvpn} # Valid values: nordvpn, expressvpn, protonvpn, surfshark or custom
      - OPENVPN_USER=${OPENVPN_USER:-""}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD:-""}

      ## For list of server countries, visit https://raw.githubusercontent.com/qdm12/gluetun/master/internal/storage/servers.json
      ## When VPN_SERVICE_PROVIDER is custom. Comment the below line
      - SERVER_COUNTRIES=${SERVER_COUNTRIES:-Switzerland}
    
      # - FREE_ONLY=on  # Valid with protonvpn only. Value willbe set "on" if using free subscription provided by protonvpn

      ## Enable below if VPN_SERVICE_PROVIDER=custom
      # - VPN_TYPE=openvpn # or wireguard. 

      ## If VPN_TYPE is openvpn
      # - OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf

      ## If VPN_TYPE is wireguard. Replace below env variables as required.
      # - VPN_ENDPOINT_IP=1.2.3.4                                               # Replace with your wg endpoint ip or domain
      # - VPN_ENDPOINT_PORT=51820                                               # Replace with wg server port
      # - WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0=     # Replace with your wg public key
      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=    # Replace with your wg client private key
      # - WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=  # Replaced with your wg pre-shared key
      # - WIREGUARD_ADDRESSES="10.64.222.21/32"                                 # Replace with wg address

    ## Enable volume if VPN_SERVICE_PROVIDER=custom and VPN_TYPE=openvpn is used
    # volumes:
      # - /yourpath/yourconfig.conf:/gluetun/config.conf:ro

    <<: *networks
    
    # Uncomment/enable below ports if VPN is used/enabled
    # ports:
    #   # qbittorrent ports
    #   - 5080:5080
    #   - 6881:6881
    #   - 6881:6881/udp
    #   # prowlarr ports
    #   - 9696:9696
    restart: "unless-stopped"

    ###########################################################################
    ###########################################################################
    ##
    ##    Docker Compose File: Heimdall (LinuxServer.io)
    ##    Function: Organise links to web sites and web applications
    ##
    ##    Documentation: https://docs.linuxserver.io/images/docker-heimdall
    ##    https://docs.linuxserver.io/general/swag#using-heimdall-as-the-home-page-at-domain-root
    ##
    ###########################################################################
    ###########################################################################
  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    volumes:
      - heimdall-config:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.heimdall.rule=PathPrefix(`/`)
      - traefik.http.routers.heimdall.entrypoints=web
      - traefik.http.routers.heimdall.middlewares=default@file,my-cache@file
    <<: *networks

  dashy:
    # To build from source, replace 'image: lissy93/dashy' with 'build: .'
    # build: .
    image: lissy93/dashy
    container_name: Dashy
    # Pass in your config file below, by specifying the path on your host machine
    volumes:
      - dashy-userdata:/app/user-data
    ports:
      - 4000:8080
    # Set any environmental variables
    environment:
      - NODE_ENV=production
    # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`
      - UID=1000
      - GID=1000
    # Specify restart policy
    restart: unless-stopped
    # Configure healthchecks
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    <<: *networks

  ## Default credentials of qBittorrent - Username: admin password: adminadmin ##
  ## Change password after install from UI --> Tools --> Options --> WebUI ##
  qbittorrent:
    container_name: qbittorrent
    image: lscr.io/linuxserver/qbittorrent:latest

    # Unomment below if vpn is enabled
    # depends_on:               # Uncomment this line if vpn is enabled
    #   - vpn                   # Uncomment this line if vpn is enabled

    # Comment below lines if VPN is enabled
    <<: *networks

    # Unomment below line if vpn is enabled
    # network_mode: service:vpn
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      # - UMASK=002
      - WEBUI_PORT=5080
      - TZ=${TIMEZONE}
      - TORRENTING_PORT=6881
    volumes:
      - qbittorrent-config:/config
      - ${DOWNLOADS_PATH}:/downloads
    labels:
      - traefik.enable=true
      # adding a slash to the end
      - "traefik.http.routers.qb.entrypoints=web"
      - "traefik.http.routers.qb.rule=PathPrefix(`/qb`)"
      - "traefik.http.middlewares.qb-redirect.redirectregex.regex=^(.*)/qb$$"
      - "traefik.http.middlewares.qb-redirect.redirectregex.replacement=$$1/qb/"
      - "traefik.http.middlewares.qb-strip.stripprefix.prefixes=/qb/"
      # appropriate header changes
      - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.Referer="
      - "traefik.http.middlewares.qb-headers.headers.customrequestheaders.Origin="
      - "traefik.http.routers.qb.middlewares=qb-strip,qb-redirect,qb-headers"
      # loadbalancer to *not* pass the host header
      - "traefik.http.services.qb.loadbalancer.server.port=5080"
      - "traefik.http.services.qb.loadbalancer.passhostheader=false"

    ## Comment/Disable below ports if VPN is enabled
    ports:
      - 5080:5080
      - 6881:6881
      - 6881:6881/udp
    restart: "unless-stopped"

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    ports:
      - "8191:8191"
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TIMEZONE}
    <<: *networks

  radarr:
    container_name: radarr
    image: lscr.io/linuxserver/radarr:latest
    networks:
      - mynetwork   # Comment this line if VPN is enabled
    ## Uncomment below lines if VPN is enabled
    #   mynetwork:
    #     ipv4_address: ${RADARR_STATIC_CONTAINER_IP} # It should be available IPv4 address in range of docker network `mynetwork` e.g. 172.20.0.2
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=PathPrefix(`/radarr`)
      - traefik.http.routers.radarr.entrypoints=web
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.http.routers.radarr.middlewares=default@file,my-cache@file
    # ports:
    #   - 7878:7878
    volumes:
      - radarr-config:/config
      - ${DOWNLOADS_PATH}:/downloads
      - ${MOVIES_PATH}:/media/movies
    restart: "unless-stopped"

  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    <<: *networks
    ## Uncomment below lines if VPN is enabled
    #   mynetwork:
    #     ipv4_address: ${RADARR_STATIC_CONTAINER_IP} # It should be available IPv4 address in range of docker network `mynetwork` e.g. 172.20.0.2
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=PathPrefix(`/bazarr`)
      - traefik.http.routers.bazarr.entrypoints=web
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr.middlewares=default@file,my-cache@file
    # ports:
    #   - 6767:6767
    volumes:
      - bazarr-config:/config
      - ${DOWNLOADS_PATH}:/downloads
      - ${MOVIES_PATH}:/media/movies
      - ${TVSHOWS_PATH}:/media/tvshows
    restart: "unless-stopped"

  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    <<: *networks
    ## Uncomment below lines if VPN is enabled
    #   mynetwork:
    #     ipv4_address: ${SONARR_STATIC_CONTAINER_IP} # It should be available IPv4 address in range of docker network `mynetwork` e.g. 172.20.0.2
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - sonarr-config:/config
      - ${DOWNLOADS_PATH}:/downloads
      - ${TVSHOWS_PATH}:/media/tvshows
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr.entrypoints=web
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr.middlewares=default@file,my-cache@file
    # ports:
    #   - 8989:8989
    restart: unless-stopped

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:latest

    # Uncomment below if vpn is enabled
    # depends_on:               # Uncomment this line if vpn is enabled
    #   - vpn                   # Uncomment this line if vpn is enabled
    # network_mode: service:vpn # Uncomment this line if vpn is enabled

    <<: *networks
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - prowlarr-config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=PathPrefix(`/prowlarr`)
      - traefik.http.routers.prowlarr.entrypoints=web
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
    # ports:
    #   - 9696:9696
    restart: unless-stopped

###########################################################################
###########################################################################
##
##  Docker Compose File: Lidarr (LinuxServer.io)
##  Function: Music Library Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-lidarr
##
###########################################################################
###########################################################################
  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    volumes:
      - lidarr-config:/config
      - ${DOWNLOADS_PATH}:/downloads
      - ${MUSIC_PATH}:/data/music
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=PathPrefix(`/lidarr`)
      - traefik.http.routers.lidarr.entrypoints=web
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      - traefik.http.routers.lidarr.middlewares=default@file,my-cache@file
    # ports:
    #   - "8686:8686"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    <<: *networks

###########################################################################
###########################################################################
##
##  Docker Compose File: Readarr (LinuxServer.io)
##  Function: Book Library Manager
##
##  Documentation: https://docs.linuxserver.io/images/docker-readarr
##
###########################################################################
###########################################################################
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    restart: unless-stopped
    volumes:
      - readarr-config:/config
      - ${BOOKS_PATH}:/media/books
      - ${DOWNLOADS_PATH}:/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr.rule=PathPrefix(`/readarr`)
      - traefik.http.routers.readarr.entrypoints=web
      - traefik.http.services.readarr.loadbalancer.server.port=8787
      - traefik.http.routers.readarr.middlewares=default@file,my-cache@file
    # ports:
    #   - "8787:8787"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    <<: *networks


###########################################################################
###########################################################################
##
##  Docker Compose File: Mylar3 (LinuxServer.io)
##  Function: Comic Library Manager
##
##  Documentation: https://github.com/mylar3/mylar3/wiki
##
###########################################################################
###########################################################################
  mylar3:
    image: lscr.io/linuxserver/mylar3:latest
    container_name: mylar3
    restart: unless-stopped
    volumes:
      - mylar3-config:/config
      - ${COMICS_PATH}:/data/comics
      - ${DOWNLOADS_PATH}:/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.mylar3.rule=Host(`samantha`) || Host(`localhost`)
      - traefik.http.routers.mylar3.entrypoints=mylar3
      - traefik.http.services.mylar3.loadbalancer.server.port=8090
      - traefik.http.routers.mylarr3.middlewares=default@file,my-cache@file
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    <<: *networks

  jellyfin:
    image: linuxserver/jellyfin:10.9.4
    container_name: jellyfin
    <<: *networks
    group_add:
      - "44"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=${UMASK}
      - TZ=${TIMEZONE}
    volumes:
      - jellyfin-config:/config
      - ${MOVIES_PATH}:/data/movies
      - ${TVSHOWS_PATH}:/data/tvshows
      - ${MUSIC_PATH}:/data/music
      - ${BOOKS_PATH}:/data/books
      - ${YOUTUBE_PATH}:/data/youtube
  # devices:
   #  - /dev/videoN:/dev/videoN # Mount GPU device
    # ports:
      # - 8096:8096
      # - 7359:7359/udp
      # - 8920:8920
    restart: unless-stopped
    labels:
      - 'traefik.enable=true'
      ## HTTP Router
      #### Entry point where Jellyfin is accessible via
      #### Change secure to https in the line below to have accessible without needing to specify a port and change the SSLHost option below
      - 'traefik.http.routers.jellyfin.entryPoints=web'
      #### Host or Path where Jellyfin is accessible
      #### Remove (or change) this rule if you'd rather have Jellyfin accessible at a PathPrefix URI
      - 'traefik.http.routers.jellyfin.rule=PathPrefix(`/jellyfin`)'
      #### Enable TLS with the ACME/LetsEncrypt resolver for HOSTNAME.DOMAIN_NAME
      # - 'traefik.http.routers.jellyfin.tls=true'
      # - 'traefik.http.routers.jellyfin.tls.certResolver=leresolver'
      # - 'traefik.http.routers.jellyfin.tls.domains=HOSTNAME.DOMAIN_NAME'
      ## Middleware
      - 'traefik.http.routers.jellyfin.middlewares=jellyfin-mw'
      #- 'traefik.http.routers.jellyfin.middlewares=jellyfin-mw'
      #### The customResponseHeaders option lists the Header names and values to apply to the response.
      - 'traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
      #### The sslRedirect is set to true, then only allow https requests.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true'
      #### The sslHost option is the host name that is used to redirect http requests to https.
      #### This is the exact URL that will be redirected to, so you can remove the :9999 port if using default SSL port
      # - 'traefik.http.middlewares.jellyfin-mw.headers.SSLHost=HOST_NAME.DOMAIN_NAME:9999'
      #### Set sslForceHost to true and set SSLHost to forced requests to use SSLHost even the ones that are already using SSL.
      #### Note that this uses SSLHost verbatim, so add the port to SSLHost if you are using an alternate port.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true'
      #### The stsSeconds is the max-age of the Strict-Transport-Security header. If set to 0, would NOT include the header.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000'
      #### The stsIncludeSubdomains is set to true, the includeSubDomains directive will be
      #### appended to the Strict-Transport-Security header.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true'
      #### Set stsPreload to true to have the preload flag appended to the Strict-Transport-Security header.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true'
      #### Set forceSTSHeader to true, to add the STS header even when the connection is HTTP.
      # - 'traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true'
      #### Set frameDeny to true to add the X-Frame-Options header with the value of DENY.
      - 'traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true'
      #### Set contentTypeNosniff to true to add the X-Content-Type-Options header with the value nosniff.
      - 'traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true'
      #### Set browserXssFilter to true to add the X-XSS-Protection header with the value 1; mode=block.
      - 'traefik.http.middlewares.jellyfin-mw.headers.customresponseheaders.X-XSS-PROTECTION=1'
      #### The customFrameOptionsValue allows the X-Frame-Options header value to be set with a custom value. This
      #### overrides the FrameDeny option.
      # - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from http://DOMAIN_NAME'"
      ## HTTP Service
      # We define the port here as a port is required, but note that the service is pointing to the service defined in @file
      # - 'traefik.http.routers.jellyfin.service=jellyfin-svc@file'
      - 'traefik.http.services.jellyfin.loadBalancer.server.port=8096'
      - 'traefik.http.services.jellyfin.loadBalancer.passHostHeader=true'
      ## Redirection of HTTP on port 9999 to HTTPS on port 9999 (consistent protocol)
      # - 'traefik.http.routers.jellyfin-insecure.entryPoints=secure'
      # - 'traefik.http.routers.jellyfin-insecure.rule=Host(`HOST_NAME.DOMAIN_NAME`)' # OPTIONAL: && PathPrefix(`/jellyfin`)
      # - 'traefik.http.routers.jellyfin-insecure.middlewares=jellyfin-insecure-mw'
      # - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.scheme=https'
      # - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.port=9999' # remove if you are using a default port
      # - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.permanent=false'
      # - 'traefik.http.routers.jellyfin-insecure.service=noop@internal'
    devices:                                    # import drivers for HW accel
      - /dev/dri:/dev/dri
      - /dev/dri/renderD128:/dev/dri/renderD128

  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
        - LOG_LEVEL=debug
        - TZ=Europe/Madrid
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=Host(`samantha`) || Host(`localhost`)
      - traefik.http.routers.jellyseerr.entrypoints=jellyseerr
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - traefik.http.routers.jellyseerr.middlewares=default@file,my-cache@file
    volumes:
      - ./jellyseerconfig:/app/config
    <<: *networks
    restart: unless-stopped

  # kapowarr:
  #   image: 'mrcas/kapowarr:latest'
  #   container_name: kapowarr
  #   volumes:
  #     - kapowarr-db:/app/db
  #     - ${DOWNLOADS_PATH}:/app/temp_downloads
  #     - ./comics:/data/comics
  #       # - 'kapowarr-db:/app/db'
  #       # - '/home/cas/media/Downloads:/app/temp_downloads'
  #       # - '/home/cas/media/Comics:/RF'
  #       # - '/home/cas/media/Comics-2:/RF-2'
  #   ports:
  #       - '5656:5656'

  
  # Doc: https://github.com/navilg/cleanmyarr
  # cleanmyarr:
  #   depends_on:
  #     - radarr
  #     - sonarr
  #   image: linuxshots/cleanmyarr:0.8.1
  #   container_name: cleanmyarr
  #   networks:
  #     - mynetwork
  #   volumes:
  #     - cleanmyarr-config:/config
    # restart: unless-stopped
    # environment:
    # - CMA_MAINTENANCE_CYCLE=${CMA_MAINTENANCE_CYCLE:-""}
    # - CMA_DELETE_AFTER_DAYS=${CMA_DELETE_AFTER_DAYS:-""}
    # - CMA_ENABLE_EMAIL_NOTIFICATION=${CMA_ENABLE_EMAIL_NOTIFICATION:-""}
    # - CMA_SMTP_USERNAME=${CMA_SMTP_USERNAME:-""}
    # - CMA_SMTP_ENCODED_PASSWORD=${CMA_SMTP_ENCODED_PASSWORD:-""}
    # - CMA_SMTP_TO_EMAILS=${CMA_SMTP_TO_EMAILS:-""}
    # - CMA_ENABLE_GOTIFY_NOTIFICATION=${CMA_ENABLE_GOTIFY_NOTIFICATION:-""}
    # - CMA_GOTIFY_URL=${CMA_GOTIFY_URL:-""}
    # - CMA_GOTIFY_ENCODED_APP_TOKEN=${CMA_GOTIFY_ENCODED_APP_TOKEN:-""}
    # - CMA_ENABLE_TELEGRAM_NOTIFICATION=${CMA_ENABLE_TELEGRAM_NOTIFICATION:-""}
    # - CMA_TELEGRAM_ENCODED_BOT_TOKEN=${CMA_TELEGRAM_ENCODED_BOT_TOKEN:-""}
    # - CMA_TELEGRAM_CHAT_ID=${CMA_TELEGRAM_CHAT_ID:-""}
    # - CMA_MONITOR_RADARR=${CMA_MONITOR_RADARR:-""}
    # - CMA_RADARR_URL=${CMA_RADARR_URL:-""}
    # - CMA_RADARR_ENCODED_API_KEY=${CMA_RADARR_ENCODED_API_KEY:-""}
    # - CMA_RADARR_ENABLE_NOTIFICATION=${CMA_RADARR_ENABLE_NOTIFICATION:-""}

volumes:
  radarr-config:
  sonarr-config:
  prowlarr-config:
  jellyfin-config:
  qbittorrent-config:
  bazarr-config:
  heimdall-config:
  lidarr-config:
  readarr-config:
  mylar3-config:
  jellyseer-config:
  dashy-userdata:
  kapowarr-db:

  # transmission-config:
  deluge-config:

networks:
  mynetwork:
    external: true
